import * Core

import @java Text java.lang.String

class Base {
    fn create() -> Base = {
       var hello = new Better { "Bye" }
       hello
    }
    fn print() -> void = {
        println("Hello world")
    }
    fn contains(name: Text) -> boolean =
        if this is Better {
            (this as Better).name.equals(name)
        } else {
            false
        }
}
class Better extends Base {
    name: Text
    fn print() -> void = {
        println(this.name)
    }
}
class Implementor {
    name: Text
    fn main() -> Better = {
        var hello = new Better { "is it?" }
        hello.name = this.name
        var j: Text = "Byte"
        if hello.contains("cast") {
            hello.create()
            if j is Better {
                println("Yes")
            } else {
                println("No")
            }
            hello
        } else {
            hello.create() as Better
        }
    }
    fn enableCast() = {
        this.name = "cast"
    }
}

fn test() = {
    var a = new Implementor { "no cast" }
    a.main().print()
    a.enableCast()
    a.main().print()
}
