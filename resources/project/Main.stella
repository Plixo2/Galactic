import Some Other.Some
import * Core
import IntList Core.IList


import @java String java.lang.String
import @java Consumer java.util.function.Consumer
import @java Function java.util.function.Function
import @java Boolean java.lang.Boolean
import @java System java.lang.System
import @java Object java.lang.Object
import @java ArrayList java.util.ArrayList
import @java List java.util.List
import @java TestObj test.TestObj
import @java Arrays java.util.Arrays

class Test extends Some {
    field: java.lang.String
    fn make(w: int) -> java.lang.String = {
        this.field
        "hello"
    }
    fn unwrap(bool: Boolean) -> boolean = {
        bool.booleanValue()
    }
    fn wrap(bool: boolean) -> Boolean = {
        Boolean.valueOf(bool)
    }
    fn wrapAndUnwrap(bool: boolean) -> boolean = {
        this.unwrap(this.wrap(bool))
    }
    fn unwrapAndWrap(bool: Boolean) -> Boolean = {
        this.wrap(this.unwrap(bool))
    }
}

class Runnable implements Consumer {
    fn accept(o: Object) -> void = {
        System.out.println(o)
    }
}

class Mapper implements Function {
    fn apply(o: Object) -> Object = {
        o.toString()
    }
}


fn main(args: [String]) -> void = {
    System.out.println("Hello World")
    var hello = System.getProperty("hello")
    System.setProperty("hello", "01100")
    var hello2: boolean = true
    hello = System.getProperty("hello")

    other(args)

    var first = getArg(0, args)
    System.out.println(first.equals("some"))
    System.out.println(getArgLength(args))
    System.out.println(first)
    System.out.println("some")

    System.out.println(hello.contains("hello"))
    System.out.println(hello.contains("bye"))
    System.out.println(hello)

    var state = if hello.contains("100") {
        100
    } else {
        500
    }
    System.out.println(state)
}

fn other(args: [String]) -> boolean = {
    System.out.println(Arrays.toString(args))
    false
}

fn getArg(index: int, args: [String]) -> Object = {
    Arrays.asList(args).get(index)
}

fn getArgLength(args: [String]) -> int = {
    Arrays.asList(args).size()
}


{
    var a: IntList = new IntList
    var number: int = a.get: 0
    a.forEach: new Runnable
    var mapped = a.stream().map(new Mapper)
    mapped.forEach: new Runnable
    var list: List = mapped.toList()
}

{
    var testOBJ = new TestObj { new TestObj { 0d }, 1.0 }


    var list: List = new ArrayList

    var IEEE = 0f
    var parser: Transform = new Transform {}

    var in: Test = new Test { "hello" }
    var c: boolean = in.exists()

    var a: Some = new Test { "hello" }
    a = new Some { }

    var case = if a.exists() {
        a.getCount()
    } else {
        a = new Some { }
        200
    }
    System.out.println(case)

    var unwrapped: boolean = new Main.Test { "hello" }.unwrap(Boolean.valueOf("true"))

    var bool: Boolean = Boolean.valueOf("false")
    System.out.println(bool)

    bool = Boolean.valueOf("true")

    var hello: java.lang.String = "Hello"
    var b: Boolean = Boolean.valueOf(hello)
    hello.equalsIgnoreCase("false")

    if true {
        var other: java.lang.Boolean = Boolean.valueOf: "true"
        b.compareTo(other)
        var other2: java.lang.Boolean = Boolean.valueOf: false
        b.compareTo(other2)
    } else if new Test { "hello" }.unwrap(b) {

    } else {
        var test: Test = new Test { "hello" }
        if test.field.isEmpty() {
            if test.make(0i).isEmpty() {
                "hi"
            } else {
                2
            }
        }
    }
}
