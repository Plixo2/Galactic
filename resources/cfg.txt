unit := topList! "EOF"!

topList := annotatedItem topList ||
annotatedItem := annotationList topEntry
topEntry := import | struct | constant
import := "use"? wordChain! importAll!
importAll := "."? "*" ||

struct := "structure"? id! genericDefinition! definitionBlock!
constant := varDefinition


annotationList := annotation annotationList! ||
annotation := "#"? id! annotationParamOpt!
annotationParamOpt := "("?! expressionList! ")"?! ||

genericDefinition := "<"? wordList! ">"?! ||

definitionBlock := "{"? definitionList! "}"?!
definitionList := definition definitionList ||


definition := id typeHintOpt defaultParamOpt
defaultParamOpt := "="? expression! ||
typeHintOpt := ":"? type! ||

type := functionType | classType

functionType := "fn"? typeOrTypeList! returnTypeOpt!

typeOrTypeList := "("? typeList! ")"?! | type!
typeList := type typeListOpt! ||
typeListOpt := ","? typeList! ||

classType := wordChain genericHintOpt!
genericHintOpt := "<"? typeList! ">"?! ||

number := "number"

id := "keyword"

wordChain := id wordChainOpt
wordChainOpt := "."? wordChain ||

wordList := id wordListOpt
wordListOpt := ","? wordList ||

branchExpr := "if"? expression body! branchOpt!
branchOpt := elseifOpt | elseOpt ||
elseifOpt := "elif"? expression! body! branchOpt!
elseOpt := "else"? body!
body := expression!

blockExpr := "{"? blockExprList!
blockExprList := "}"? | expression blockExprList!


returnStatement := "return"? expression!
varDefinition := id varTypeDef
varTypeDef := ":"? "="? expression! | ":"? type "="? expression!

//expression
expression := varDefinition | returnStatement | boolArithmetic
boolArithmetic := comparisonArithmetic boolRight!
comparisonArithmetic := arithmetic comparisonRight!
arithmetic := term arithmeticRight!
term := factor termRight!

boolRight := boolArithmeticFunc boolArithmetic ||
comparisonRight := comparisonArithmeticFunc comparisonArithmetic ||
arithmeticRight := arithmeticFunc arithmetic ||
termRight := termFunc term ||

factor := object memberList assignOpt
assignOpt := "="? expression! ||
object := blockExpr | branchExpr | "("? expression ")"? | number | id | function
memberList := memberAccess memberList! ||
memberAccess := "." id! | "("? expressionList ")"?! | "["? expression! "]"?!

expressionList := expression expressionList! ||
expressionListOpt := ","? expressionList! ||

//function
function := "fn"? "("?! argumentList ")"? returnTypeOpt expression
returnTypeOpt := "->"? type! ||
argumentList := definition argumentListOpt ||
argumentListOpt := "," argumentList ||

//operators
termFunc := "*" | "/"
arithmeticFunc := "+" | "-"
comparisonArithmeticFunc := ">" | ">=" | "<" | "<=" | "==" | "!="
boolArithmeticFunc := "&&" | "||"
