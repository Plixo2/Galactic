unit := itemList! "EOF"?

itemList := item itemList ||
item := import | class | block | method

import := "import"? importType! importName!  dotWordChain!
importName := id | "*"?
importType := "@"? id! ||

class := "class"? id! extends! implements! classBlock!
extends := "extends"? type ||
implements := "implements"? typeList ||

classBlock := "{"? classItemList "}"?!

classItemList := classItem classItemList! ||
classItem := method | field

field := id ":" type!

block := blockExpr

method := "fn"? id! "("?! parameterList! ")"?! "->"?! type! "=" expression!
parameterList := parameter parameterListOpt! ||
parameterListOpt := "," parameterList! ||
parameter := id ":"?! type!

blockExpr := "{"? blockExprList!
blockExprList := "}"? | expression blockExprList!

expression := variableDefinition | factor
variableDefinition := "var" id! typeHint! "="! expression! |
typeHint := ":"? type! ||
branch := "if"? expression! body! branchOpt!
branchOpt := "else"? expression! ||
body := expression!

factor := object memberList! assignOpt!
assignOpt := "="? expression! ||

object := initialisation | branch | blockExpr | string | number | id | "("? expression! ")"?!

initialisation := "new"? type! initialisationList!
initialisationList := "{"? initialisationFieldList! "}"?! ||
initialisationFieldList := initialisationField initialisationFieldListOpt! ||
initialisationFieldListOpt := ","? initialisationFieldList! ||
initialisationField := expression

memberList := memberAccess memberList! ||
memberAccess := "."? id! | callAccess
callAccess := "("? expressionList! ")"?! | ":"? expression!
//dotNotationValues := id | number | string

expressionList := expression expressionListOpt! ||
expressionListOpt := ","? expressionList! ||

type := arrayType | classType | primitive
primitive := "void" | "double" | "float" | "int" | "byte" | "short" | "long" | "boolean" | "char"
arrayType := "["? type! "]"?!
classType := dotWordChain

typeList := type typeListOpt! ||
typeListOpt := ","? typeList! ||

dotWordChain := id dotWordChainOpt!
dotWordChainOpt := "."? dotWordChain ||



id := "word"
number := "number"
string := "string"


//unit := topList! "EOF"!
//
//topList := annotatedItem topList ||
//annotatedItem := annotationList topEntry
//topEntry := import | struct | constant | atInterface
//import := "use"? language! wordChain! importAll!
//language := "interface" ||
//importAll := "."? "*" ||
//
//atInterface := "@interface"? id! definitionBlock!
//
//struct := "structure"? id! genericDefinition! definitionBlock!
//constant := constDefine
//
//
//annotationList := annotation annotationList! ||
//annotation := "#"? id! annotationParamOpt!
//annotationParamOpt := "("? expressionList! ")"?! ||
//
//genericDefinition := "<"? wordList! ">"?! ||
//
//definitionBlock := "{"? definitionList! "}"?!
//definitionList := annotatedDefinition definitionList ||
//
//annotatedDefinition := annotationList definition
//definition := id typeHintOpt defaultParamOpt
//defaultParamOpt := "="? expression! ||
//typeHintOpt := ":"? type! ||
//
//type := functionType | classType
//
//functionType := "fn"? ownerDef typeOrTypeList! returnTypeOpt!
//
//typeOrTypeList := "("? typeList! ")"?! | type!
//typeList := type typeListOpt! ||
//typeListOpt := ","? typeList! ||
//
//classType := wordChain genericHintOpt!
//genericHintOpt := "<"? typeList! ">"?! ||
//
//number := "number"
//string := "string"
//
//id := "keyword"
//
//wordChain := id wordChainOpt
//wordChainOpt := "."? wordChain ||
//
//wordList := id wordListOpt
//wordListOpt := ","? wordList ||
//
//branchExpr := "if"? expression! body! branchOpt!
//branchOpt := elseifOpt | elseOpt ||
//elseifOpt := "elif"? expression! body! branchOpt! | "else"? "if"? expression! body! branchOpt!
//elseOpt := "else"? body!
//body := "=>" expression! | blockExpr!
//
//blockExpr := "{"? blockExprList!
//blockExprList := "}"? | expression blockExprList!
//
//
//returnStatement := "return"? expressionOpt!
//expressionOpt := expression ||
//
//constDefine := id constTypeDef
//constTypeDef := ":"? "="? expression! | ":"? type "="? expression!
//
//
//varDefinition := id varTypeDef
//varTypeDef := "="? expression! | ":"? "="? expression! | ":"? type "="? expression!
//
////expression
//expression := "var"? varDefinition endOfStatement! | returnStatement endOfStatement! | boolArithmetic endOfStatement!
//boolArithmetic := comparisonArithmetic boolRight!
//comparisonArithmetic := arithmetic comparisonRight!
//arithmetic := term arithmeticRight!
//term := factor termRight!
//
//boolRight := boolArithmeticFunc boolArithmetic ||
//comparisonRight := comparisonArithmeticFunc comparisonArithmetic ||
//arithmeticRight := arithmeticFunc arithmetic ||
//termRight := termFunc term ||
//
//factor := object memberList! assignOpt!
//endOfStatement := ||
//assignOpt := "="? expression! ||
//object := blockExpr | branchExpr | unary | "("? expression ")"? | number | id | function | string
//memberList := memberAccess memberList! ||
//memberAccess := "." id! | callAccess | "["? expression! "]"?!
//callAccess := "("? expressionList! ")"?! | ":"? expression!
//
//unary :=  "!"? factor! | "-" factor
//
//expressionList := expression expressionListOpt! ||
//expressionListOpt := ","? expressionList! ||
//
////function
//function := "fn"? ownerDef "("?! argumentList ")"? returnTypeOpt expression
//ownerDef := "["? type "]"? ||
//returnTypeOpt := "->"? type! ||
//argumentList := definition argumentListOpt ||
//argumentListOpt := "," argumentList ||
//
////operators
//termFunc := "*" | "/"
//arithmeticFunc := "+" | "-"
//comparisonArithmeticFunc := ">" | ">=" | "<" | "<=" | "==" | "!="
//boolArithmeticFunc := "&&" | "||"
