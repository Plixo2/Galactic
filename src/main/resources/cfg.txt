unit := itemList! "EOF"?

itemList := item itemList ||
item := import | class | method

import := "import"? importType! importName! dotWordChain!
importName := id | "*"?
importType := "@"? id! ||

class := "class"? id! extends! implements! classBlock!
extends := "extends"? type ||
implements := "implements"? typeList ||

classBlock := "{"? classItemList! "}"?!

classItemList := classItem classItemList! ||
classItem := method | field

field := id ":" type!


method := "fn"? id! "("?! parameterList! ")"?! returnTypeOpt! extends! "="! expression!
returnTypeOpt := "->"? type! ||
parameterList := parameter parameterListOpt! ||
parameterListOpt := "," parameterList! ||
parameter := id ":"?! type!

blockExpr := "{"? blockExprList!
blockExprList := "}"? | expression blockExprList!


variableDefinition := "var" id! typeHint! "="! expression! |
typeHint := ":"? type! ||
branch := "if"? expression! body! branchOpt!
branchOpt := "else"? expression! ||
body := blockExpr!


for := "for"? id! "in"?! expression! blockExpr!
while := "while"? expression! blockExpr!


initialisation := "new"? type! initialisationList!
initialisationList := "{"? initialisationFieldList! "}"?! ||
initialisationFieldList := initialisationField initialisationFieldListOpt! ||
initialisationFieldListOpt := ","? initialisationFieldList! ||
initialisationField := expression

postfixList := postFix postfixList! ||
postFix := "."? id! | callAccess | cast | castCheck
callAccess := "("? expressionList! ")"?! | ":"? commaWordChain! blockExpr!
cast := "as"? type!
castCheck := "is"? type!
//postFor := "for"? expression! blockExpr!


expressionList := expression expressionListOpt! ||
expressionListOpt := ","? expressionList! ||

type := arrayType | classType | primitive
primitive := "void" | "double" | "float" | "int" | "byte" | "short" | "long" | "boolean" | "char"
arrayType := "["? type! "]"?!
classType := dotWordChain

typeList := type typeListOpt! ||
typeListOpt := ","? typeList! ||

dotWordChain := id dotWordChainOpt!
dotWordChainOpt := "."? dotWordChain ||

commaWordChain := id commaWordChainOpt!
commaWordChainOpt := ","? commaWordChain ||

superCall := "super"? "<"? type! ">"?! id! "("?! expressionList! ")"?! | "super" "("? expressionList! ")"?!


id := "word"
number := "number"
string := "string"


function := "fn"? "("?! functionParameterList! ")"?! returnTypeOpt! functionType! "="?! expression!
functionType := "implements" type! ||

functionParameterList := functionParameter functionParameterListOpt! ||
functionParameterListOpt := "," functionParameterList! ||
functionParameter := id ":"? type! | id




ConditionalOrExpression := ConditionalAndExpression ConditionalOrExpressionRight!
ConditionalOrExpressionRight := ConditionalOrExpressionFunction ConditionalOrExpression ||
ConditionalOrExpressionFunction := "||"

ConditionalAndExpression := InclusiveOrExpression ConditionalAndExpressionRight!
ConditionalAndExpressionRight := ConditionalAndExpressionFunction ConditionalAndExpression ||
ConditionalAndExpressionFunction := "&&"

InclusiveOrExpression := ExclusiveOrExpression InclusiveOrExpressionRight!
InclusiveOrExpressionRight := InclusiveOrExpressionFunction InclusiveOrExpression ||
InclusiveOrExpressionFunction := "|"

ExclusiveOrExpression := AndExpression ExclusiveOrExpressionRight!
ExclusiveOrExpressionRight := ExclusiveOrExpressionFunction ExclusiveOrExpression ||
ExclusiveOrExpressionFunction := "^"

AndExpression := EqualityExpression AndExpressionRight!
AndExpressionRight := AndExpressionFunction AndExpression ||
AndExpressionFunction := "&"

EqualityExpression := RelationalExpression EqualityExpressionRight!
EqualityExpressionRight := EqualityExpressionFunction EqualityExpression ||
EqualityExpressionFunction := "==" | "!="

RelationalExpression := AdditiveExpression RelationalExpressionRight!
RelationalExpressionRight := RelationalExpressionFunction RelationalExpression ||
RelationalExpressionFunction := ">=" | "<=" | ">" | "<"

AdditiveExpression := MultiplicativeExpression AdditiveExpressionRight!
AdditiveExpressionRight := AdditiveExpressionFunction AdditiveExpression ||
AdditiveExpressionFunction := "+" | "-"

MultiplicativeExpression := UnaryExpression MultiplicativeExpressionRight!
MultiplicativeExpressionRight := MultiplicativeExpressionFunction MultiplicativeExpression ||
MultiplicativeExpressionFunction := "*" | "/" | "%"

UnaryExpression := UnaryExpressionFunction factor | factor
UnaryExpressionFunction := "!" | "~" | "-" | "+"

//expression := variableDefinition | factor
expression := variableDefinition | ConditionalOrExpression
this := "this"
object := initialisation | branch | while | blockExpr | this | string | number | id | "("? expression! ")"?!
factor := object postfixList! assignOpt!
assignOpt := "="? expression! ||

